;#lang fudanmaku

(define-pattern ring (offset radius count index)
  (let ((deg-step (/ 360.0 count)))
    (parallel i 0 -> (add1 count)
      (let ((θ (+ offset (* i deg-step))))
        (bullet
          #:position  (list (* radius (cosd θ))
                             (* radius (sind θ)))
          #:direction θ
          #:speed     1
          ;; stash the loop index so the transform can see it:
          #:i         index)))))


(define-transform speed-shake (bullet)
  (update-bullet! bullet
    ;; compute a sign: +30 for even i (right‐turn), –30 for odd (left‐turn)
    #:speed (+ (get-attr bullet 'speed) 0.01)))

;; Combine ring + transform + delay
(define-pattern ring-with-speed-shake (offset radius count index after)
  (transform
    speed-shake
    (every-frame after)
    (ring offset radius count index)))

;; Fire ten waves, each one delayed 50 frames from the last
(define-pattern top ()
  (sequential wave 1 -> 1
    (ring-with-speed-shake
      0     ; offset
      0     ; radius
      12    ; bullets per ring
      wave  ; loop index
      1)   ; transform delay
    (wait 30)))
