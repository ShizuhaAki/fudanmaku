#lang racket
(require racket/cmdline
         racket/list
         racket/pretty
         "bullet.rkt"
         "parser.rkt"
         "evaluator.rkt")

;; Parse command line arguments
(define input-file  #f)
(define output-file #f)

(command-line
 #:program "fudanmaku"
 #:args (in out)
 (set! input-file in)
 (set! output-file out))

(unless (and input-file output-file)
  (error 'main "Usage: racket fudanmaku.rkt <input-file> <output-file>"))

;; Step 1: Load and parse
(define forms (file->list input-file))
(define decls (parse-program forms))
(define schedule (evaluate-program decls))

;; Step 2: Convert bullets to clean form
(define (bullet->sexpr b)
  (define h (bullet-attrs b))
  `(bullet
    (uid ,(hash-ref h 'uid))
    (position ,@(hash-ref h 'position))
    (direction ,(hash-ref h 'direction))
    (speed ,(hash-ref h 'speed))))

;; Step 3: Generate full data structure
(define frames
  (for/list ([f (sort (hash-keys schedule) <)])
    (define bullets (hash-ref schedule f))
    `(frame ,f ,@(map bullet->sexpr bullets))))

;; Step 4: Write to file
(call-with-output-file output-file
  (lambda (port)
    (fprintf port ";; This is Fudanmaku FTL, version 1.0\n")
    (fprintf port ";; Autogenerated, do not edit\n\n")
    (pretty-print `(ftl ,@frames) port))
  #:exists 'replace)
